// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/friend/v1/friend.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetRequestPendingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRequestPendingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRequestPendingRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRequestPendingRequestMultiError, or nil if none found.
func (m *GetRequestPendingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRequestPendingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetRequestPendingRequestMultiError(errors)
	}

	return nil
}

// GetRequestPendingRequestMultiError is an error wrapping multiple validation
// errors returned by GetRequestPendingRequest.ValidateAll() if the designated
// constraints aren't met.
type GetRequestPendingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRequestPendingRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRequestPendingRequestMultiError) AllErrors() []error { return m }

// GetRequestPendingRequestValidationError is the validation error returned by
// GetRequestPendingRequest.Validate if the designated constraints aren't met.
type GetRequestPendingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRequestPendingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRequestPendingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRequestPendingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRequestPendingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRequestPendingRequestValidationError) ErrorName() string {
	return "GetRequestPendingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetRequestPendingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRequestPendingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRequestPendingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRequestPendingRequestValidationError{}

// Validate checks the field values on GetRequestPendingReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRequestPendingReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRequestPendingReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRequestPendingReplyMultiError, or nil if none found.
func (m *GetRequestPendingReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRequestPendingReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRequests() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetRequestPendingReplyValidationError{
						field:  fmt.Sprintf("Requests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetRequestPendingReplyValidationError{
						field:  fmt.Sprintf("Requests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetRequestPendingReplyValidationError{
					field:  fmt.Sprintf("Requests[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetRequestPendingReplyMultiError(errors)
	}

	return nil
}

// GetRequestPendingReplyMultiError is an error wrapping multiple validation
// errors returned by GetRequestPendingReply.ValidateAll() if the designated
// constraints aren't met.
type GetRequestPendingReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRequestPendingReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRequestPendingReplyMultiError) AllErrors() []error { return m }

// GetRequestPendingReplyValidationError is the validation error returned by
// GetRequestPendingReply.Validate if the designated constraints aren't met.
type GetRequestPendingReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRequestPendingReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRequestPendingReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRequestPendingReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRequestPendingReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRequestPendingReplyValidationError) ErrorName() string {
	return "GetRequestPendingReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetRequestPendingReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRequestPendingReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRequestPendingReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRequestPendingReplyValidationError{}

// Validate checks the field values on FriendRequestInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FriendRequestInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FriendRequestInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FriendRequestInfoMultiError, or nil if none found.
func (m *FriendRequestInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *FriendRequestInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FromId

	// no validation rules for RequestTime

	if len(errors) > 0 {
		return FriendRequestInfoMultiError(errors)
	}

	return nil
}

// FriendRequestInfoMultiError is an error wrapping multiple validation errors
// returned by FriendRequestInfo.ValidateAll() if the designated constraints
// aren't met.
type FriendRequestInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FriendRequestInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FriendRequestInfoMultiError) AllErrors() []error { return m }

// FriendRequestInfoValidationError is the validation error returned by
// FriendRequestInfo.Validate if the designated constraints aren't met.
type FriendRequestInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FriendRequestInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FriendRequestInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FriendRequestInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FriendRequestInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FriendRequestInfoValidationError) ErrorName() string {
	return "FriendRequestInfoValidationError"
}

// Error satisfies the builtin error interface
func (e FriendRequestInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFriendRequestInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FriendRequestInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FriendRequestInfoValidationError{}

// Validate checks the field values on FriendMarkRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FriendMarkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FriendMarkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FriendMarkRequestMultiError, or nil if none found.
func (m *FriendMarkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FriendMarkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetUniqueId()); l < 1 || l > 20 {
		err := FriendMarkRequestValidationError{
			field:  "UniqueId",
			reason: "value length must be between 1 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_FriendMarkRequest_UniqueId_Pattern.MatchString(m.GetUniqueId()) {
		err := FriendMarkRequestValidationError{
			field:  "UniqueId",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9_-]{1,20}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetMark()); l < 0 || l > 30 {
		err := FriendMarkRequestValidationError{
			field:  "Mark",
			reason: "value length must be between 0 and 30 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_FriendMarkRequest_Mark_Pattern.MatchString(m.GetMark()) {
		err := FriendMarkRequestValidationError{
			field:  "Mark",
			reason: "value does not match regex pattern \"^[一-龥A-Za-z0-9_\\\\x{1F600}-\\\\x{1F64F}\\\\x{1F300}-\\\\x{1F5FF}]+$|^$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return FriendMarkRequestMultiError(errors)
	}

	return nil
}

// FriendMarkRequestMultiError is an error wrapping multiple validation errors
// returned by FriendMarkRequest.ValidateAll() if the designated constraints
// aren't met.
type FriendMarkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FriendMarkRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FriendMarkRequestMultiError) AllErrors() []error { return m }

// FriendMarkRequestValidationError is the validation error returned by
// FriendMarkRequest.Validate if the designated constraints aren't met.
type FriendMarkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FriendMarkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FriendMarkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FriendMarkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FriendMarkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FriendMarkRequestValidationError) ErrorName() string {
	return "FriendMarkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FriendMarkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFriendMarkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FriendMarkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FriendMarkRequestValidationError{}

var _FriendMarkRequest_UniqueId_Pattern = regexp.MustCompile("^[a-zA-Z0-9_-]{1,20}$")

var _FriendMarkRequest_Mark_Pattern = regexp.MustCompile("^[一-龥A-Za-z0-9_\\x{1F600}-\\x{1F64F}\\x{1F300}-\\x{1F5FF}]+$|^$")

// Validate checks the field values on FriendMarkReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FriendMarkReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FriendMarkReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FriendMarkReplyMultiError, or nil if none found.
func (m *FriendMarkReply) ValidateAll() error {
	return m.validate(true)
}

func (m *FriendMarkReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Msg

	if len(errors) > 0 {
		return FriendMarkReplyMultiError(errors)
	}

	return nil
}

// FriendMarkReplyMultiError is an error wrapping multiple validation errors
// returned by FriendMarkReply.ValidateAll() if the designated constraints
// aren't met.
type FriendMarkReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FriendMarkReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FriendMarkReplyMultiError) AllErrors() []error { return m }

// FriendMarkReplyValidationError is the validation error returned by
// FriendMarkReply.Validate if the designated constraints aren't met.
type FriendMarkReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FriendMarkReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FriendMarkReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FriendMarkReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FriendMarkReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FriendMarkReplyValidationError) ErrorName() string { return "FriendMarkReplyValidationError" }

// Error satisfies the builtin error interface
func (e FriendMarkReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFriendMarkReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FriendMarkReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FriendMarkReplyValidationError{}

// Validate checks the field values on GetFriendProfileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFriendProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFriendProfileRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFriendProfileRequestMultiError, or nil if none found.
func (m *GetFriendProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFriendProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetUniqueId()); l < 1 || l > 20 {
		err := GetFriendProfileRequestValidationError{
			field:  "UniqueId",
			reason: "value length must be between 1 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_GetFriendProfileRequest_UniqueId_Pattern.MatchString(m.GetUniqueId()) {
		err := GetFriendProfileRequestValidationError{
			field:  "UniqueId",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9_-]{1,20}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetFriendProfileRequestMultiError(errors)
	}

	return nil
}

// GetFriendProfileRequestMultiError is an error wrapping multiple validation
// errors returned by GetFriendProfileRequest.ValidateAll() if the designated
// constraints aren't met.
type GetFriendProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFriendProfileRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFriendProfileRequestMultiError) AllErrors() []error { return m }

// GetFriendProfileRequestValidationError is the validation error returned by
// GetFriendProfileRequest.Validate if the designated constraints aren't met.
type GetFriendProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFriendProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFriendProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFriendProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFriendProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFriendProfileRequestValidationError) ErrorName() string {
	return "GetFriendProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetFriendProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFriendProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFriendProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFriendProfileRequestValidationError{}

var _GetFriendProfileRequest_UniqueId_Pattern = regexp.MustCompile("^[a-zA-Z0-9_-]{1,20}$")

// Validate checks the field values on GetFriendProfileReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFriendProfileReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFriendProfileReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFriendProfileReplyMultiError, or nil if none found.
func (m *GetFriendProfileReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFriendProfileReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetFriendProfileReplyValidationError{
					field:  "UserProfile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetFriendProfileReplyValidationError{
					field:  "UserProfile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetFriendProfileReplyValidationError{
				field:  "UserProfile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UniqueId

	// no validation rules for PublicKey

	if len(errors) > 0 {
		return GetFriendProfileReplyMultiError(errors)
	}

	return nil
}

// GetFriendProfileReplyMultiError is an error wrapping multiple validation
// errors returned by GetFriendProfileReply.ValidateAll() if the designated
// constraints aren't met.
type GetFriendProfileReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFriendProfileReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFriendProfileReplyMultiError) AllErrors() []error { return m }

// GetFriendProfileReplyValidationError is the validation error returned by
// GetFriendProfileReply.Validate if the designated constraints aren't met.
type GetFriendProfileReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFriendProfileReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFriendProfileReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFriendProfileReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFriendProfileReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFriendProfileReplyValidationError) ErrorName() string {
	return "GetFriendProfileReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetFriendProfileReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFriendProfileReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFriendProfileReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFriendProfileReplyValidationError{}

// Validate checks the field values on UserProfile with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserProfile) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserProfile with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserProfileMultiError, or
// nil if none found.
func (m *UserProfile) ValidateAll() error {
	return m.validate(true)
}

func (m *UserProfile) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetNickname()); l < 0 || l > 30 {
		err := UserProfileValidationError{
			field:  "Nickname",
			reason: "value length must be between 0 and 30 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UserProfile_Nickname_Pattern.MatchString(m.GetNickname()) {
		err := UserProfileValidationError{
			field:  "Nickname",
			reason: "value does not match regex pattern \"^[一-龥A-Za-z0-9_\\\\x{1F600}-\\\\x{1F64F}\\\\x{1F300}-\\\\x{1F5FF}]+$|^$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetBio()) > 200 {
		err := UserProfileValidationError{
			field:  "Bio",
			reason: "value length must be at most 200 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _UserProfile_Gender_InLookup[m.GetGender()]; !ok {
		err := UserProfileValidationError{
			field:  "Gender",
			reason: "value must be in list [0 1 2]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UserProfile_Birthday_Pattern.MatchString(m.GetBirthday()) {
		err := UserProfileValidationError{
			field:  "Birthday",
			reason: "value does not match regex pattern \"^(19|20)\\\\d{2}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$|^$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UserProfile_Location_Pattern.MatchString(m.GetLocation()) {
		err := UserProfileValidationError{
			field:  "Location",
			reason: "value does not match regex pattern \"^[一-龥A-Za-zA-Z]+/[一-龥A-Za-zA-Z]+$|^$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Other

	if len(errors) > 0 {
		return UserProfileMultiError(errors)
	}

	return nil
}

// UserProfileMultiError is an error wrapping multiple validation errors
// returned by UserProfile.ValidateAll() if the designated constraints aren't met.
type UserProfileMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserProfileMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserProfileMultiError) AllErrors() []error { return m }

// UserProfileValidationError is the validation error returned by
// UserProfile.Validate if the designated constraints aren't met.
type UserProfileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserProfileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserProfileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserProfileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserProfileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserProfileValidationError) ErrorName() string { return "UserProfileValidationError" }

// Error satisfies the builtin error interface
func (e UserProfileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserProfile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserProfileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserProfileValidationError{}

var _UserProfile_Nickname_Pattern = regexp.MustCompile("^[一-龥A-Za-z0-9_\\x{1F600}-\\x{1F64F}\\x{1F300}-\\x{1F5FF}]+$|^$")

var _UserProfile_Gender_InLookup = map[int32]struct{}{
	0: {},
	1: {},
	2: {},
}

var _UserProfile_Birthday_Pattern = regexp.MustCompile("^(19|20)\\d{2}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$|^$")

var _UserProfile_Location_Pattern = regexp.MustCompile("^[一-龥A-Za-zA-Z]+/[一-龥A-Za-zA-Z]+$|^$")

// Validate checks the field values on SendFriendRequestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendFriendRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendFriendRequestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendFriendRequestRequestMultiError, or nil if none found.
func (m *SendFriendRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendFriendRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetTargetUniqueId()); l < 1 || l > 20 {
		err := SendFriendRequestRequestValidationError{
			field:  "TargetUniqueId",
			reason: "value length must be between 1 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_SendFriendRequestRequest_TargetUniqueId_Pattern.MatchString(m.GetTargetUniqueId()) {
		err := SendFriendRequestRequestValidationError{
			field:  "TargetUniqueId",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9_-]{1,20}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SendFriendRequestRequestMultiError(errors)
	}

	return nil
}

// SendFriendRequestRequestMultiError is an error wrapping multiple validation
// errors returned by SendFriendRequestRequest.ValidateAll() if the designated
// constraints aren't met.
type SendFriendRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendFriendRequestRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendFriendRequestRequestMultiError) AllErrors() []error { return m }

// SendFriendRequestRequestValidationError is the validation error returned by
// SendFriendRequestRequest.Validate if the designated constraints aren't met.
type SendFriendRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendFriendRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendFriendRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendFriendRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendFriendRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendFriendRequestRequestValidationError) ErrorName() string {
	return "SendFriendRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendFriendRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendFriendRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendFriendRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendFriendRequestRequestValidationError{}

var _SendFriendRequestRequest_TargetUniqueId_Pattern = regexp.MustCompile("^[a-zA-Z0-9_-]{1,20}$")

// Validate checks the field values on SendFriendRequestResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendFriendRequestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendFriendRequestResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendFriendRequestResponseMultiError, or nil if none found.
func (m *SendFriendRequestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendFriendRequestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Msg

	if len(errors) > 0 {
		return SendFriendRequestResponseMultiError(errors)
	}

	return nil
}

// SendFriendRequestResponseMultiError is an error wrapping multiple validation
// errors returned by SendFriendRequestResponse.ValidateAll() if the
// designated constraints aren't met.
type SendFriendRequestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendFriendRequestResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendFriendRequestResponseMultiError) AllErrors() []error { return m }

// SendFriendRequestResponseValidationError is the validation error returned by
// SendFriendRequestResponse.Validate if the designated constraints aren't met.
type SendFriendRequestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendFriendRequestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendFriendRequestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendFriendRequestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendFriendRequestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendFriendRequestResponseValidationError) ErrorName() string {
	return "SendFriendRequestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendFriendRequestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendFriendRequestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendFriendRequestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendFriendRequestResponseValidationError{}

// Validate checks the field values on AcceptFriendRequestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AcceptFriendRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AcceptFriendRequestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AcceptFriendRequestRequestMultiError, or nil if none found.
func (m *AcceptFriendRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AcceptFriendRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetOtherUniqueId()); l < 1 || l > 20 {
		err := AcceptFriendRequestRequestValidationError{
			field:  "OtherUniqueId",
			reason: "value length must be between 1 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_AcceptFriendRequestRequest_OtherUniqueId_Pattern.MatchString(m.GetOtherUniqueId()) {
		err := AcceptFriendRequestRequestValidationError{
			field:  "OtherUniqueId",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9_-]{1,20}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AcceptFriendRequestRequestMultiError(errors)
	}

	return nil
}

// AcceptFriendRequestRequestMultiError is an error wrapping multiple
// validation errors returned by AcceptFriendRequestRequest.ValidateAll() if
// the designated constraints aren't met.
type AcceptFriendRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AcceptFriendRequestRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AcceptFriendRequestRequestMultiError) AllErrors() []error { return m }

// AcceptFriendRequestRequestValidationError is the validation error returned
// by AcceptFriendRequestRequest.Validate if the designated constraints aren't met.
type AcceptFriendRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AcceptFriendRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AcceptFriendRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AcceptFriendRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AcceptFriendRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AcceptFriendRequestRequestValidationError) ErrorName() string {
	return "AcceptFriendRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AcceptFriendRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAcceptFriendRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AcceptFriendRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AcceptFriendRequestRequestValidationError{}

var _AcceptFriendRequestRequest_OtherUniqueId_Pattern = regexp.MustCompile("^[a-zA-Z0-9_-]{1,20}$")

// Validate checks the field values on AcceptFriendRequestResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AcceptFriendRequestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AcceptFriendRequestResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AcceptFriendRequestResponseMultiError, or nil if none found.
func (m *AcceptFriendRequestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AcceptFriendRequestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Msg

	if len(errors) > 0 {
		return AcceptFriendRequestResponseMultiError(errors)
	}

	return nil
}

// AcceptFriendRequestResponseMultiError is an error wrapping multiple
// validation errors returned by AcceptFriendRequestResponse.ValidateAll() if
// the designated constraints aren't met.
type AcceptFriendRequestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AcceptFriendRequestResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AcceptFriendRequestResponseMultiError) AllErrors() []error { return m }

// AcceptFriendRequestResponseValidationError is the validation error returned
// by AcceptFriendRequestResponse.Validate if the designated constraints
// aren't met.
type AcceptFriendRequestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AcceptFriendRequestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AcceptFriendRequestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AcceptFriendRequestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AcceptFriendRequestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AcceptFriendRequestResponseValidationError) ErrorName() string {
	return "AcceptFriendRequestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AcceptFriendRequestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAcceptFriendRequestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AcceptFriendRequestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AcceptFriendRequestResponseValidationError{}

// Validate checks the field values on RejectFriendRequestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RejectFriendRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RejectFriendRequestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RejectFriendRequestRequestMultiError, or nil if none found.
func (m *RejectFriendRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RejectFriendRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetOtherUniqueId()); l < 1 || l > 20 {
		err := RejectFriendRequestRequestValidationError{
			field:  "OtherUniqueId",
			reason: "value length must be between 1 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_RejectFriendRequestRequest_OtherUniqueId_Pattern.MatchString(m.GetOtherUniqueId()) {
		err := RejectFriendRequestRequestValidationError{
			field:  "OtherUniqueId",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9_-]{1,20}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RejectFriendRequestRequestMultiError(errors)
	}

	return nil
}

// RejectFriendRequestRequestMultiError is an error wrapping multiple
// validation errors returned by RejectFriendRequestRequest.ValidateAll() if
// the designated constraints aren't met.
type RejectFriendRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RejectFriendRequestRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RejectFriendRequestRequestMultiError) AllErrors() []error { return m }

// RejectFriendRequestRequestValidationError is the validation error returned
// by RejectFriendRequestRequest.Validate if the designated constraints aren't met.
type RejectFriendRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RejectFriendRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RejectFriendRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RejectFriendRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RejectFriendRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RejectFriendRequestRequestValidationError) ErrorName() string {
	return "RejectFriendRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RejectFriendRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRejectFriendRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RejectFriendRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RejectFriendRequestRequestValidationError{}

var _RejectFriendRequestRequest_OtherUniqueId_Pattern = regexp.MustCompile("^[a-zA-Z0-9_-]{1,20}$")

// Validate checks the field values on RejectFriendRequestResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RejectFriendRequestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RejectFriendRequestResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RejectFriendRequestResponseMultiError, or nil if none found.
func (m *RejectFriendRequestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RejectFriendRequestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Msg

	if len(errors) > 0 {
		return RejectFriendRequestResponseMultiError(errors)
	}

	return nil
}

// RejectFriendRequestResponseMultiError is an error wrapping multiple
// validation errors returned by RejectFriendRequestResponse.ValidateAll() if
// the designated constraints aren't met.
type RejectFriendRequestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RejectFriendRequestResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RejectFriendRequestResponseMultiError) AllErrors() []error { return m }

// RejectFriendRequestResponseValidationError is the validation error returned
// by RejectFriendRequestResponse.Validate if the designated constraints
// aren't met.
type RejectFriendRequestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RejectFriendRequestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RejectFriendRequestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RejectFriendRequestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RejectFriendRequestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RejectFriendRequestResponseValidationError) ErrorName() string {
	return "RejectFriendRequestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RejectFriendRequestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRejectFriendRequestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RejectFriendRequestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RejectFriendRequestResponseValidationError{}

// Validate checks the field values on GetFriendListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFriendListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFriendListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFriendListRequestMultiError, or nil if none found.
func (m *GetFriendListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFriendListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetFriendListRequestMultiError(errors)
	}

	return nil
}

// GetFriendListRequestMultiError is an error wrapping multiple validation
// errors returned by GetFriendListRequest.ValidateAll() if the designated
// constraints aren't met.
type GetFriendListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFriendListRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFriendListRequestMultiError) AllErrors() []error { return m }

// GetFriendListRequestValidationError is the validation error returned by
// GetFriendListRequest.Validate if the designated constraints aren't met.
type GetFriendListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFriendListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFriendListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFriendListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFriendListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFriendListRequestValidationError) ErrorName() string {
	return "GetFriendListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetFriendListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFriendListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFriendListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFriendListRequestValidationError{}

// Validate checks the field values on GetFriendListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFriendListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFriendListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFriendListResponseMultiError, or nil if none found.
func (m *GetFriendListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFriendListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFriends() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetFriendListResponseValidationError{
						field:  fmt.Sprintf("Friends[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetFriendListResponseValidationError{
						field:  fmt.Sprintf("Friends[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetFriendListResponseValidationError{
					field:  fmt.Sprintf("Friends[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Count

	if len(errors) > 0 {
		return GetFriendListResponseMultiError(errors)
	}

	return nil
}

// GetFriendListResponseMultiError is an error wrapping multiple validation
// errors returned by GetFriendListResponse.ValidateAll() if the designated
// constraints aren't met.
type GetFriendListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFriendListResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFriendListResponseMultiError) AllErrors() []error { return m }

// GetFriendListResponseValidationError is the validation error returned by
// GetFriendListResponse.Validate if the designated constraints aren't met.
type GetFriendListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFriendListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFriendListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFriendListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFriendListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFriendListResponseValidationError) ErrorName() string {
	return "GetFriendListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetFriendListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFriendListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFriendListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFriendListResponseValidationError{}

// Validate checks the field values on FriendInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FriendInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FriendInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FriendInfoMultiError, or
// nil if none found.
func (m *FriendInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *FriendInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UniqueId

	// no validation rules for Nickname

	if len(errors) > 0 {
		return FriendInfoMultiError(errors)
	}

	return nil
}

// FriendInfoMultiError is an error wrapping multiple validation errors
// returned by FriendInfo.ValidateAll() if the designated constraints aren't met.
type FriendInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FriendInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FriendInfoMultiError) AllErrors() []error { return m }

// FriendInfoValidationError is the validation error returned by
// FriendInfo.Validate if the designated constraints aren't met.
type FriendInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FriendInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FriendInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FriendInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FriendInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FriendInfoValidationError) ErrorName() string { return "FriendInfoValidationError" }

// Error satisfies the builtin error interface
func (e FriendInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFriendInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FriendInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FriendInfoValidationError{}

// Validate checks the field values on DeleteFriendRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteFriendRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteFriendRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteFriendRequestMultiError, or nil if none found.
func (m *DeleteFriendRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteFriendRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TargetUniqueId

	if len(errors) > 0 {
		return DeleteFriendRequestMultiError(errors)
	}

	return nil
}

// DeleteFriendRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteFriendRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteFriendRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteFriendRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteFriendRequestMultiError) AllErrors() []error { return m }

// DeleteFriendRequestValidationError is the validation error returned by
// DeleteFriendRequest.Validate if the designated constraints aren't met.
type DeleteFriendRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteFriendRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteFriendRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteFriendRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteFriendRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteFriendRequestValidationError) ErrorName() string {
	return "DeleteFriendRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteFriendRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteFriendRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteFriendRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteFriendRequestValidationError{}

// Validate checks the field values on DeleteFriendResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteFriendResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteFriendResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteFriendResponseMultiError, or nil if none found.
func (m *DeleteFriendResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteFriendResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Msg

	if len(errors) > 0 {
		return DeleteFriendResponseMultiError(errors)
	}

	return nil
}

// DeleteFriendResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteFriendResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteFriendResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteFriendResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteFriendResponseMultiError) AllErrors() []error { return m }

// DeleteFriendResponseValidationError is the validation error returned by
// DeleteFriendResponse.Validate if the designated constraints aren't met.
type DeleteFriendResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteFriendResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteFriendResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteFriendResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteFriendResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteFriendResponseValidationError) ErrorName() string {
	return "DeleteFriendResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteFriendResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteFriendResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteFriendResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteFriendResponseValidationError{}
