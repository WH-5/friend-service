// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/push/v1/push.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PushMsgRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PushMsgRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PushMsgRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PushMsgRequestMultiError,
// or nil if none found.
func (m *PushMsgRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PushMsgRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetToUnique()); l < 1 || l > 20 {
		err := PushMsgRequestValidationError{
			field:  "ToUnique",
			reason: "value length must be between 1 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_PushMsgRequest_ToUnique_Pattern.MatchString(m.GetToUnique()) {
		err := PushMsgRequestValidationError{
			field:  "ToUnique",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9_-]{1,20}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for SelfUserId

	// no validation rules for MsgType

	// no validation rules for Payload

	if len(errors) > 0 {
		return PushMsgRequestMultiError(errors)
	}

	return nil
}

// PushMsgRequestMultiError is an error wrapping multiple validation errors
// returned by PushMsgRequest.ValidateAll() if the designated constraints
// aren't met.
type PushMsgRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PushMsgRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PushMsgRequestMultiError) AllErrors() []error { return m }

// PushMsgRequestValidationError is the validation error returned by
// PushMsgRequest.Validate if the designated constraints aren't met.
type PushMsgRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushMsgRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushMsgRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushMsgRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PushMsgRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushMsgRequestValidationError) ErrorName() string { return "PushMsgRequestValidationError" }

// Error satisfies the builtin error interface
func (e PushMsgRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushMsgRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushMsgRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PushMsgRequestValidationError{}

var _PushMsgRequest_ToUnique_Pattern = regexp.MustCompile("^[a-zA-Z0-9_-]{1,20}$")

// Validate checks the field values on PushMsgReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PushMsgReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PushMsgReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PushMsgReplyMultiError, or
// nil if none found.
func (m *PushMsgReply) ValidateAll() error {
	return m.validate(true)
}

func (m *PushMsgReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Msg

	if len(errors) > 0 {
		return PushMsgReplyMultiError(errors)
	}

	return nil
}

// PushMsgReplyMultiError is an error wrapping multiple validation errors
// returned by PushMsgReply.ValidateAll() if the designated constraints aren't met.
type PushMsgReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PushMsgReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PushMsgReplyMultiError) AllErrors() []error { return m }

// PushMsgReplyValidationError is the validation error returned by
// PushMsgReply.Validate if the designated constraints aren't met.
type PushMsgReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushMsgReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushMsgReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushMsgReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PushMsgReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushMsgReplyValidationError) ErrorName() string { return "PushMsgReplyValidationError" }

// Error satisfies the builtin error interface
func (e PushMsgReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushMsgReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushMsgReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PushMsgReplyValidationError{}

// Validate checks the field values on ChatPayload with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ChatPayload) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatPayload with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ChatPayloadMultiError, or
// nil if none found.
func (m *ChatPayload) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatPayload) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Content

	// no validation rules for ContentType

	if len(errors) > 0 {
		return ChatPayloadMultiError(errors)
	}

	return nil
}

// ChatPayloadMultiError is an error wrapping multiple validation errors
// returned by ChatPayload.ValidateAll() if the designated constraints aren't met.
type ChatPayloadMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatPayloadMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatPayloadMultiError) AllErrors() []error { return m }

// ChatPayloadValidationError is the validation error returned by
// ChatPayload.Validate if the designated constraints aren't met.
type ChatPayloadValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatPayloadValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatPayloadValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatPayloadValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatPayloadValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatPayloadValidationError) ErrorName() string { return "ChatPayloadValidationError" }

// Error satisfies the builtin error interface
func (e ChatPayloadValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatPayload.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatPayloadValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatPayloadValidationError{}

// Validate checks the field values on FriendPayload with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FriendPayload) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FriendPayload with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FriendPayloadMultiError, or
// nil if none found.
func (m *FriendPayload) ValidateAll() error {
	return m.validate(true)
}

func (m *FriendPayload) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	if len(errors) > 0 {
		return FriendPayloadMultiError(errors)
	}

	return nil
}

// FriendPayloadMultiError is an error wrapping multiple validation errors
// returned by FriendPayload.ValidateAll() if the designated constraints
// aren't met.
type FriendPayloadMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FriendPayloadMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FriendPayloadMultiError) AllErrors() []error { return m }

// FriendPayloadValidationError is the validation error returned by
// FriendPayload.Validate if the designated constraints aren't met.
type FriendPayloadValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FriendPayloadValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FriendPayloadValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FriendPayloadValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FriendPayloadValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FriendPayloadValidationError) ErrorName() string { return "FriendPayloadValidationError" }

// Error satisfies the builtin error interface
func (e FriendPayloadValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFriendPayload.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FriendPayloadValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FriendPayloadValidationError{}
